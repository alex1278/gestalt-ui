image: 
  name: galacticfog/docker-yarn-debian:1.12
  entrypoint: ["/bin/bash"]

stages:
- test
- publish
- review
- deploy

cache:
  untracked: false
  key: "$CI_PIPELINE_ID"
  paths:
  #- .yarn-cache/

variables:
  DOCKER_IMG: "galacticfog/gestalt-ui-react"
  REVIEW_APP_URL: https://gtw1.demo.galacticfog.com/ci/ui-review-deploy
  LEGACY_CI_URL:     https://gtw1.demo.galacticfog.com/ci/legacy-ci

test:
  stage: test
  script:
    - nvm use
    - yarn cache dir
    - yarn --frozen-lockfile install
    - yarn test:coverage
  artifacts:
    expire_in: 60 minutes
    paths:
    - test/coverage/

.deploy_template: &deploy_to_test
  stage: deploy
  services:
    - docker:dind
  environment:
    name: test
    url: https://test.galacticfog.com
  allow_failure: false
  script:
    - nvm use
    - VERSION=$(<package.json jq -r '.version')
    - DOCKER_TAG=${CI_BUILD_TAG-$VERSION-${CI_BUILD_REF:0:8}}
    - yarn --frozen-lockfile install
    - yarn build
    - docker build --no-cache -t $DOCKER_IMG:$DOCKER_TAG .
    - docker push                $DOCKER_IMG:$DOCKER_TAG
    - |
      if [ ${CI_COMMIT_REF_NAME} == "develop" ]; then
         docker tag  $DOCKER_IMG:$DOCKER_TAG $DOCKER_IMG:latest
         docker push $DOCKER_IMG:latest
      fi
    - docker rmi      $DOCKER_IMG:$DOCKER_TAG
    - echo "Will deploy docker tag $DOCKER_IMG:$DOCKER_TAG to test.galacticfog.com"
    - http --check-status -a "$API_KEY":"$API_SECRET" --ignore-stdin $LEGACY_CI_URL project=ui image=$DOCKER_IMG:$DOCKER_TAG git_ref=$CI_COMMIT_REF_NAME git_sha=$CI_COMMIT_SHA git_author="$GITLAB_USER_NAME"

auto-deploy-develop-to-test:
  <<: *deploy_to_test
  only:
    - develop
  dependencies:
    - test

publish-docker-image:
  stage: publish
  services:
    - docker:dind
  allow_failure: false
  script:
    - nvm use
    - VERSION=$(<package.json jq -r '.version')
    - DOCKER_TAG=${CI_BUILD_TAG-$VERSION-${CI_BUILD_REF:0:8}}
    - yarn --frozen-lockfile install
    - yarn build
    - docker build --no-cache -t $DOCKER_IMG:$DOCKER_TAG .
    - docker push                $DOCKER_IMG:$DOCKER_TAG
    - docker rmi      $DOCKER_IMG:$DOCKER_TAG
  only:
    - tags

# manual-deploy-to-test:
#   <<: *deploy_to_test
#   when: manual
#   dependencies:
#     - test

pages:
  stage: publish
  dependencies:
    - test
  script:
    - mkdir -p public
    - cp -r test/coverage/lcov-report/* public/
  artifacts:
    paths:
      - public
    expire_in: 60 days
  only:
    - develop

review:
  stage: review
  services:
    - docker:dind
  script:
    - nvm use
    - VERSION=$(<package.json jq -r '.version')
    - DOCKER_TAG=${CI_BUILD_TAG-$VERSION-${CI_BUILD_REF:0:8}}
    - yarn --frozen-lockfile install
    - yarn build
    - docker build --no-cache -t $DOCKER_IMG:$DOCKER_TAG .
    - docker push                $DOCKER_IMG:$DOCKER_TAG
    - docker rmi      $DOCKER_IMG:$DOCKER_TAG
    - echo "Will deploy docker tag $DOCKER_IMG:$DOCKER_TAG review app"
    - http --check-status -a "$API_KEY":"$API_SECRET" --ignore-stdin $REVIEW_APP_URL image=$DOCKER_IMG:$DOCKER_TAG git_ref=$CI_COMMIT_REF_NAME git_sha=$CI_COMMIT_SHA git_author="$GITLAB_USER_NAME" gitlab_env_slug=$CI_ENVIRONMENT_SLUG
  dependencies:
    - test
  environment:
    name: review/$CI_BUILD_REF_NAME
    on_stop: stop_review
  when: manual
  except:
    - develop

stop_review:
  stage: review
  script:
    - http --check-status -a "$API_KEY":"$API_SECRET" --ignore-stdin "$REVIEW_APP_URL?entryPoint=stop" gitlab_env_slug=$CI_ENVIRONMENT_SLUG
  variables:
    GIT_STRATEGY: none
  environment:
    name: review/$CI_BUILD_REF_NAME
    action: stop
  when: manual
  except:
    - develop

