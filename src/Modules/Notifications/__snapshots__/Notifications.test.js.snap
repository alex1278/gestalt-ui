// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`(Notifications) Notifications renders to correct snapshot with items in the queue 1`] = `
.c0 {
  position: fixed;
  bottom: 52px;
  left: 64px;
  z-index: 999;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  pointer-events: none;
}

.c0 .fade-enter {
  opacity: 0;
}

.c0 .fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms cubic-bezier(0.4,0,0.2,1) 0ms;
  transition: opacity 200ms cubic-bezier(0.4,0,0.2,1) 0ms;
}

.c0 .fade-exit {
  opacity: 1;
}

.c0 .fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms cubic-bezier(0.4,0,0.2,1) 0ms;
  transition: opacity 200ms cubic-bezier(0.4,0,0.2,1) 0ms;
}

<div
  className="c0"
>
  <TransitionGroup
    childFactory={[Function]}
    component="div"
  >
    <CSSTransition
      classNames="fade"
      key="1"
      timeout={200}
    >
      <WithTheme(NotificationContent)
        message={
          Object {
            "id": 1,
            "message": "hi ho",
          }
        }
        onRemove={[MockFunction]}
      />
    </CSSTransition>
  </TransitionGroup>
</div>
`;

exports[`(Notifications) Notifications renders to correct snapshot with no items in the queue 1`] = `
.c0 {
  position: fixed;
  bottom: 52px;
  left: 64px;
  z-index: 999;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  pointer-events: none;
}

.c0 .fade-enter {
  opacity: 0;
}

.c0 .fade-enter-active {
  opacity: 1;
  -webkit-transition: opacity 200ms cubic-bezier(0.4,0,0.2,1) 0ms;
  transition: opacity 200ms cubic-bezier(0.4,0,0.2,1) 0ms;
}

.c0 .fade-exit {
  opacity: 1;
}

.c0 .fade-exit-active {
  opacity: 0;
  -webkit-transition: opacity 200ms cubic-bezier(0.4,0,0.2,1) 0ms;
  transition: opacity 200ms cubic-bezier(0.4,0,0.2,1) 0ms;
}

<div
  className="c0"
>
  <TransitionGroup
    childFactory={[Function]}
    component="div"
  />
</div>
`;
