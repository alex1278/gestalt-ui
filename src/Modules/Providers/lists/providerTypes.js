// import { orderBy } from 'lodash';

export default [
  {
    displayName: 'Mesosphere DC/OS',
    name: 'Gestalt::Configuration::Provider::CaaS::DCOS',
    type: 'DCOS',
    DCOSConfig: true,
    DCOSSecurity: true,
    networking: true,
    extraConfig: true,
    uploadConfig: false,
    allowContainer: false,
    externalProtocol: true,
    allowEnvVariables: true,
    DCOSEnterprise: true,
    allowLinkedProviders: true,
    allowedRestrictEnvironments: true,
  },
  {
    displayName: 'Kubernetes',
    name: 'Gestalt::Configuration::Provider::CaaS::Kubernetes',
    type: 'KUBERNETES',
    networking: false,
    extraConfig: false,
    uploadConfig: true,
    allowContainer: false,
    externalProtocol: true,
    allowEnvVariables: true,
    allowLinkedProviders: true,
    allowedRestrictEnvironments: true,
  },
  {
    displayName: 'Docker Swarm',
    name: 'Gestalt::Configuration::Provider::CaaS::Docker',
    type: 'DOCKER',
    networking: true,
    extraConfig: false,
    uploadConfig: false,
    allowContainer: false,
    externalProtocol: true,
    allowEnvVariables: true,
    allowLinkedProviders: true,
    allowedRestrictEnvironments: true,
  },
  {
    displayName: 'APIGateway (Kong)',
    name: 'Gestalt::Configuration::Provider::Kong',
    type: 'KONG',
    networking: false,
    extraConfig: true,
    uploadConfig: false,
    allowContainer: true,
    externalProtocol: true,
    allowEnvVariables: true,
    allowLinkedProviders: true,
    allowedRestrictEnvironments: true,
  },
  {
    displayName: 'GatewayManager',
    name: 'Gestalt::Configuration::Provider::GatewayManager',
    type: 'GATEWAYMANAGER',
    networking: false,
    extraConfig: true,
    uploadConfig: false,
    allowContainer: true,
    externalProtocol: false,
    allowEnvVariables: true,
    allowLinkedProviders: true,
    allowedRestrictEnvironments: true,
  },
  {
    displayName: 'Security',
    name: 'Gestalt::Configuration::Provider::Security',
    type: 'SECURITY',
    networking: false,
    extraConfig: false,
    uploadConfig: false,
    allowContainer: false,
    externalProtocol: false,
    allowEnvVariables: true,
    allowLinkedProviders: true,
    allowedRestrictEnvironments: true,
  },
  {
    displayName: 'PostgreSQL',
    name: 'Gestalt::Configuration::Provider::Data::PostgreSQL',
    type: 'DATA::POSTGRESQL',
    networking: false,
    extraConfig: false,
    uploadConfig: false,
    allowContainer: false,
    externalProtocol: false,
    allowEnvVariables: true,
    allowLinkedProviders: true,
    allowedRestrictEnvironments: true,
  },
  {
    displayName: 'RabbitMQ',
    name: 'Gestalt::Configuration::Provider::Messaging::RabbitMQ',
    type: 'MESSAGING::RABBITMQ',
    networking: false,
    extraConfig: false,
    uploadConfig: false,
    allowContainer: false,
    externalProtocol: false,
    allowEnvVariables: true,
    allowLinkedProviders: true,
    allowedRestrictEnvironments: true,
  },
  {
    displayName: 'Policy',
    name: 'Gestalt::Configuration::Provider::Policy',
    type: 'POLICY',
    networking: false,
    extraConfig: false,
    uploadConfig: false,
    allowContainer: true,
    externalProtocol: false,
    allowEnvVariables: true,
    allowLinkedProviders: true,
    allowedRestrictEnvironments: true,
  },
  {
    displayName: 'Logging',
    name: 'Gestalt::Configuration::Provider::Logging',
    type: 'LOGGING',
    networking: false,
    extraConfig: false,
    uploadConfig: false,
    allowContainer: true,
    externalProtocol: false,
    allowEnvVariables: true,
    allowLinkedProviders: true,
    allowedRestrictEnvironments: true,
  },
  {
    displayName: 'Lambda',
    name: 'Gestalt::Configuration::Provider::Lambda',
    type: 'LAMBDA',
    networking: false,
    extraConfig: false,
    uploadConfig: false,
    allowContainer: true,
    externalProtocol: false,
    allowEnvVariables: true,
    allowLinkedProviders: true,
    allowedRestrictEnvironments: true,
  },
  {
    displayName: 'Lambda Executor NodeJS',
    name: 'Gestalt::Configuration::Provider::Lambda::Executor::NodeJS',
    type: 'LAMBDA::NODEJS',
    networking: false,
    extraConfig: false,
    uploadConfig: false,
    allowContainer: false,
    externalProtocol: false,
    allowEnvVariables: true,
    allowLinkedProviders: true,
    allowedRestrictEnvironments: true,
  },
  {
    displayName: 'Lambda Executor Nashorn',
    name: 'Gestalt::Configuration::Provider::Lambda::Executor::Nashorn',
    type: 'LAMBDA::NASHORN',
    networking: false,
    extraConfig: false,
    uploadConfig: false,
    allowContainer: false,
    externalProtocol: false,
    allowEnvVariables: true,
    allowLinkedProviders: true,
    allowedRestrictEnvironments: true,
  },
  {
    displayName: 'Lambda Executor Scala',
    name: 'Gestalt::Configuration::Provider::Lambda::Executor::Scala',
    type: 'LAMBDA::SCALA',
    networking: false,
    extraConfig: false,
    uploadConfig: false,
    allowContainer: false,
    externalProtocol: false,
    allowEnvVariables: true,
    allowLinkedProviders: true,
    allowedRestrictEnvironments: true,
  },
  {
    displayName: 'Lambda Executor Java',
    name: 'Gestalt::Configuration::Provider::Lambda::Executor::Java',
    type: 'LAMBDA::JAVA',
    networking: false,
    extraConfig: false,
    uploadConfig: false,
    allowContainer: false,
    externalProtocol: false,
    allowEnvVariables: true,
    allowLinkedProviders: true,
    allowedRestrictEnvironments: true,
  },
  {
    displayName: 'Lambda Executor Ruby',
    name: 'Gestalt::Configuration::Provider::Lambda::Executor::Ruby',
    type: 'LAMBDA::RUBY',
    networking: false,
    extraConfig: false,
    uploadConfig: false,
    allowContainer: false,
    externalProtocol: false,
    allowEnvVariables: true,
    allowLinkedProviders: true,
    allowedRestrictEnvironments: true,
  },
  {
    displayName: 'Lambda Executor Python',
    name: 'Gestalt::Configuration::Provider::Lambda::Executor::Python',
    type: 'LAMBDA::PYTHON',
    networking: false,
    extraConfig: false,
    uploadConfig: false,
    allowContainer: false,
    externalProtocol: false,
    allowEnvVariables: true,
    allowLinkedProviders: true,
    allowedRestrictEnvironments: true,
  },
  {
    displayName: 'Lambda Executor C#',
    name: 'Gestalt::Configuration::Provider::Lambda::Executor::CSharp',
    type: 'LAMBDA::CSHARP',
    networking: false,
    extraConfig: false,
    uploadConfig: false,
    allowContainer: false,
    externalProtocol: false,
    allowEnvVariables: true,
    allowLinkedProviders: true,
    allowedRestrictEnvironments: true,
  },
  {
    displayName: 'Lambda Executor Go',
    name: 'Gestalt::Configuration::Provider::Lambda::Executor::GoLang',
    type: 'LAMBDA::GO',
    networking: false,
    extraConfig: false,
    uploadConfig: false,
    allowContainer: false,
    externalProtocol: false,
    allowEnvVariables: true,
    allowLinkedProviders: true,
    allowedRestrictEnvironments: true,
  },
];

// const blacklistAbstracts = [
//   'Gestalt::Configuration::Provider::ActionProvider',
//   'Gestalt::Configuration::Provider::Messaging',
//   'Gestalt::Configuration::Provider::Lambda::Executor',
//   'Gestalt::Resource::DataContainer',
//   'Gestalt::Configuration::Provider::Data',
//   'Gestalt::Configuration::Provider::CaaS',
//   'Gestalt::Configuration::Provider',
//   'Gestalt::Resource',
//   'Gestalt::Resource::Runnable',
//   'Gestalt::Resource::ResourceContainer',
// ];

// export const generateResourceTypeSchema = (resourceTypes) => {
//   // Ideally instead of blacklisting use properties.abstract, however it is always true.
//   const list = resourceTypes
//     .filter(r => r.name !== blacklistAbstracts.find(bl => bl === r.name))
//     .map(r => ({ displayName: r.name, name: r.name, type: r.name, ...uiProviderTypes.find(i => i.name === r.name) }));
//   return orderBy(list, 'displayName');
// };
